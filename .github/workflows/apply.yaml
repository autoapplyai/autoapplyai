name: Auto-Apply AI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'   # daily at 03:00 UTC

jobs:
  apply:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install selenium pyyaml requests weasyprint jinja2

      - name: Install Google Chrome & ChromeDriver
        run: |
          # Add Google Chrome repo and key
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub \
            | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" \
            | sudo tee /etc/apt/sources.list.d/google-chrome.list

          sudo apt-get update
          sudo apt-get install -y google-chrome-stable unzip

          # Detect Chrome major version
          CHROME_VER=$(google-chrome --version \
            | sed -E 's/Google Chrome ([0-9]+)\..*/\1/')
          echo "üîç Detected Chrome major version $CHROME_VER"

          # Try to fetch matching driver, else fall back to latest
          DRIVER_VER=$(curl -fsS \
            "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VER" \
            || echo "")
          if [ -z "$DRIVER_VER" ]; then
            echo "‚ö†Ô∏è No driver for version $CHROME_VER, falling back to latest"
            DRIVER_VER=$(curl -fsS \
              https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          fi
          echo "üîç Using ChromeDriver version $DRIVER_VER"

          # Download & install the driver
          curl -fsS -Lo /tmp/chromedriver.zip \
            "https://chromedriver.storage.googleapis.com/$DRIVER_VER/chromedriver_linux64.zip"
          unzip -o /tmp/chromedriver.zip -d /tmp
          sudo mv /tmp/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Find jobs
        run: python find_jobs.py

      - name: Run Auto-Apply
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
        run: python generate_application.py
